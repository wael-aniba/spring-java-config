<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>edu.esprit.spring.app</groupId>
	<artifactId>spring-app</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<contributors>
		<contributor>
			<email>wael.aniba@esprit.tn</email>
			<name>wael.aniba</name>
			<organization>ESPRIT</organization>
			<organizationUrl>http://www.esprit.ens.tn/</organizationUrl>
		</contributor>
	</contributors>
	<inceptionYear>2015</inceptionYear>

	<modules>
		<module>spring-app-domain</module>
		<module>spring-app-service</module>
		<module>spring-app-client</module>
		<module>spring-app-web</module>
	</modules>

	<properties>

		<!-- project properties -->
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Dependencies properties -->
		<org.springframework.version>4.1.6.RELEASE</org.springframework.version>
		<org.aspectj.version>1.6.10</org.aspectj.version>
		<aspectjweaver>1.6.6</aspectjweaver>
		<org.slf4j.version>1.6.6</org.slf4j.version>
		<log4j.version>1.2.15</log4j.version>
		<javax.inject.version>1</javax.inject.version>
		<servlet.api.version>3.1.0</servlet.api.version>
		<jsp.api.version>2.1</jsp.api.version>
		<jstl.version>1.2</jstl.version>
		<hibernate.entitymanager.version>4.3.10.Final</hibernate.entitymanager.version>
		<hibernate.validator.version>5.1.3.Final</hibernate.validator.version>
		<mysql.connector.java.version>5.1.6</mysql.connector.java.version>
		<apache.dbcp.version>1.2.2</apache.dbcp.version>
		<junit.version>4.11</junit.version>
		<javax.el.api.version>2.2.4</javax.el.api.version>

		<!-- Plugins properties -->
		<maven.eclipse.plugin.version>2.9</maven.eclipse.plugin.version>
		<maven-war-plugin-version>2.5</maven-war-plugin-version>
		<tomcat7.maven.plugin.version>2.1</tomcat7.maven.plugin.version>

	</properties>

	<dependencyManagement>

		<dependencies>

			<!-- spring-app sub-modules -->
			<dependency>
				<groupId>edu.esprit.spring.app</groupId>
				<artifactId>spring-app-domain</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>edu.esprit.spring.app</groupId>
				<artifactId>spring-app-service</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>edu.esprit.spring.app</groupId>
				<artifactId>spring-app-web</artifactId>
				<version>${project.version}</version>
				<classifier>classes</classifier>
			</dependency>

			<!-- Spring -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${org.springframework.version}</version>
				<exclusions>
					<!-- Exclude Commons Logging in favor of SLF4j -->
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!-- AspectJ -->
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjrt</artifactId>
				<version>${org.aspectj.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjweaver</artifactId>
				<version>${aspectjweaver}</version>
			</dependency>

			<!-- Logging -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${org.slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${org.slf4j.version}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
				<exclusions>
					<exclusion>
						<groupId>javax.mail</groupId>
						<artifactId>mail</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.jms</groupId>
						<artifactId>jms</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jdmk</groupId>
						<artifactId>jmxtools</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jmx</groupId>
						<artifactId>jmxri</artifactId>
					</exclusion>
				</exclusions>
				<scope>compile</scope>
			</dependency>

			<!-- @Inject -->
			<dependency>
				<groupId>javax.inject</groupId>
				<artifactId>javax.inject</artifactId>
				<version>${javax.inject.version}</version>
			</dependency>

			<!-- Servlet -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet.api.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>jsp-api</artifactId>
				<version>${jsp.api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>${jstl.version}</version>
			</dependency>

			<!-- Test -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${org.springframework.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>javax.el</groupId>
				<artifactId>javax.el-api</artifactId>
				<version>${javax.el.api.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- Hibernate -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-entitymanager</artifactId>
				<version>${hibernate.entitymanager.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-validator</artifactId>
				<version>${hibernate.validator.version}</version>
			</dependency>

			<!-- DataBase Connection Pool -->
			<dependency>
				<groupId>commons-dbcp</groupId>
				<artifactId>commons-dbcp</artifactId>
				<version>${apache.dbcp.version}</version>
			</dependency>

			<!-- MySQL -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql.connector.java.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<build>
		<defaultGoal>clean install tomcat7:redeploy</defaultGoal>
		<plugins>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>${maven.eclipse.plugin.version}</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>

			<!-- In Maven, you cannot just load classes from a WAR artifact the way you can from a JAR artifact.
			Therefore, the recommendation is to split off a separate Maven JAR project with the classes you want
			to reuse, and depend on this project in both the original WAR and the new project. also tell Maven
			that you need a JAR artifact in addition to the WAR. Put this into the POM of your WAR project: 
			......
				<attachClasses>true</attachClasses>
			......
			Then, when building the WAR project Maven will create a WAR and a JAR from it.
			If you use <attachClasses>, you'll also need to add <classifier>classes</classifier> in the dependency
			declaration where you reference the jar. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven-war-plugin-version}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<attachClasses>true</attachClasses>
				</configuration>
			</plugin>

			<!-- Deploy wars to Tomcat 7 with mvn tomcat7:deploy or tomcat7:redeploy 
				==> When trying to redeploy the app, an error containing "cannot invoke tomcat 
				manager fail - unable to delete..." will be displayed. To work around this, 
				change the TOMCAT_HOME/conf/context.xml to include the 'antiJARLocking' attribute 
				like so: <Context antiJARLocking="true" antiResourceLocking="true"> -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${tomcat7.maven.plugin.version}</version>
			</plugin>

		</plugins>
	</build>

</project>